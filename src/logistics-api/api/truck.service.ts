/**
 * Logistics API
 * Logistics API provides services to find and manage entities for logistics
 *
 * OpenAPI spec version: 1.0
 * Contact: vladislavprokopenko1@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateTruck } from '../model/createTruck';
import { Truck } from '../model/truck';
import { UpdateTruckByDriver } from '../model/updateTruckByDriver';
import { UpdateTruckByLogistician } from '../model/updateTruckByLogistician';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TruckService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new Truck
     * 
     * @param body Truck object that needs to be added to truck list
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public truckCreate(body: CreateTruck, observe?: 'body', reportProgress?: boolean): Observable<Truck>;
    public truckCreate(body: CreateTruck, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Truck>>;
    public truckCreate(body: CreateTruck, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Truck>>;
    public truckCreate(body: CreateTruck, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling truckCreate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Truck>('post',`${this.basePath}/trucks`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Truck
     * 
     * @param number Truck number in proper format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public truckDelete(number: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public truckDelete(number: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public truckDelete(number: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public truckDelete(number: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling truckDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/trucks/${encodeURIComponent(String(number))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find current Truck for driver
     * 
     * @param personalNumber Driver&#x27;s personal number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public truckFindByDriver(personalNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Truck>;
    public truckFindByDriver(personalNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Truck>>;
    public truckFindByDriver(personalNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Truck>>;
    public truckFindByDriver(personalNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling truckFindByDriver.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Truck>('get',`${this.basePath}/trucks/byDriver/${encodeURIComponent(String(personalNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Truck by number
     * 
     * @param number Truck number in proper format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public truckFindByNumber(number: string, observe?: 'body', reportProgress?: boolean): Observable<Truck>;
    public truckFindByNumber(number: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Truck>>;
    public truckFindByNumber(number: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Truck>>;
    public truckFindByNumber(number: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling truckFindByNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Truck>('get',`${this.basePath}/trucks/${encodeURIComponent(String(number))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Truck
     * 
     * @param body Truck object that needs to be updated
     * @param number Truck number in proper format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public truckUpdateByDriver(body: UpdateTruckByDriver, number: string, observe?: 'body', reportProgress?: boolean): Observable<Truck>;
    public truckUpdateByDriver(body: UpdateTruckByDriver, number: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Truck>>;
    public truckUpdateByDriver(body: UpdateTruckByDriver, number: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Truck>>;
    public truckUpdateByDriver(body: UpdateTruckByDriver, number: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling truckUpdateByDriver.');
        }

        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling truckUpdateByDriver.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Truck>('patch',`${this.basePath}/trucks/byDriver/${encodeURIComponent(String(number))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Truck
     * 
     * @param body Truck object that needs to be updated
     * @param number Truck number in proper format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public truckUpdateByLogistician(body: UpdateTruckByLogistician, number: string, observe?: 'body', reportProgress?: boolean): Observable<Truck>;
    public truckUpdateByLogistician(body: UpdateTruckByLogistician, number: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Truck>>;
    public truckUpdateByLogistician(body: UpdateTruckByLogistician, number: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Truck>>;
    public truckUpdateByLogistician(body: UpdateTruckByLogistician, number: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling truckUpdateByLogistician.');
        }

        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling truckUpdateByLogistician.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Truck>('patch',`${this.basePath}/trucks/byLogistician/${encodeURIComponent(String(number))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all Trucks
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public trucksFindAll(observe?: 'body', reportProgress?: boolean): Observable<Array<Truck>>;
    public trucksFindAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Truck>>>;
    public trucksFindAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Truck>>>;
    public trucksFindAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Truck>>('get',`${this.basePath}/trucks`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Trucks by busy status
     * 
     * @param busyStatus Busy status can be: YES / NO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public trucksFindByBusyStatus(busyStatus: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Truck>>;
    public trucksFindByBusyStatus(busyStatus: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Truck>>>;
    public trucksFindByBusyStatus(busyStatus: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Truck>>>;
    public trucksFindByBusyStatus(busyStatus: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (busyStatus === null || busyStatus === undefined) {
            throw new Error('Required parameter busyStatus was null or undefined when calling trucksFindByBusyStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Truck>>('get',`${this.basePath}/trucks/busy/${encodeURIComponent(String(busyStatus))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Trucks by current city and state
     * 
     * @param city Current city
     * @param state Current state
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public trucksFindByCurrentCityAndState(city: string, state: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Truck>>;
    public trucksFindByCurrentCityAndState(city: string, state: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Truck>>>;
    public trucksFindByCurrentCityAndState(city: string, state: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Truck>>>;
    public trucksFindByCurrentCityAndState(city: string, state: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling trucksFindByCurrentCityAndState.');
        }

        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling trucksFindByCurrentCityAndState.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (city !== undefined && city !== null) {
            queryParameters = queryParameters.set('city', <any>city);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Truck>>('get',`${this.basePath}/trucks/currentCityAndState`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Trucks by technical condition
     * 
     * @param technicalConditionStatus Technical condition can be: OK / NOK
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public trucksFindByTechnicalCondition(technicalConditionStatus: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Truck>>;
    public trucksFindByTechnicalCondition(technicalConditionStatus: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Truck>>>;
    public trucksFindByTechnicalCondition(technicalConditionStatus: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Truck>>>;
    public trucksFindByTechnicalCondition(technicalConditionStatus: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (technicalConditionStatus === null || technicalConditionStatus === undefined) {
            throw new Error('Required parameter technicalConditionStatus was null or undefined when calling trucksFindByTechnicalCondition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Truck>>('get',`${this.basePath}/trucks/technicalCondition/${encodeURIComponent(String(technicalConditionStatus))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find proper Trucks for Order: not busy, in current city and state, having required capacity
     * 
     * @param orderId Order id
     * @param city Current city
     * @param state Current state
     * @param capacity Minimum required Truck capacity
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public trucksFindForOrder(orderId: number, city: string, state: string, capacity: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Truck>>;
    public trucksFindForOrder(orderId: number, city: string, state: string, capacity: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Truck>>>;
    public trucksFindForOrder(orderId: number, city: string, state: string, capacity: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Truck>>>;
    public trucksFindForOrder(orderId: number, city: string, state: string, capacity: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling trucksFindForOrder.');
        }

        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling trucksFindForOrder.');
        }

        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling trucksFindForOrder.');
        }

        if (capacity === null || capacity === undefined) {
            throw new Error('Required parameter capacity was null or undefined when calling trucksFindForOrder.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (orderId !== undefined && orderId !== null) {
            queryParameters = queryParameters.set('orderId', <any>orderId);
        }
        if (city !== undefined && city !== null) {
            queryParameters = queryParameters.set('city', <any>city);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }
        if (capacity !== undefined && capacity !== null) {
            queryParameters = queryParameters.set('capacity', <any>capacity);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Truck>>('get',`${this.basePath}/trucks/forOrder`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
