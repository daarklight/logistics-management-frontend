/**
 * Logistics API
 * Logistics API provides services to find and manage entities for logistics
 *
 * OpenAPI spec version: 1.0
 * Contact: vladislavprokopenko1@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateDriver } from '../model/createDriver';
import { Driver } from '../model/driver';
import { UpdateDriverByLogistician } from '../model/updateDriverByLogistician';
import { UpdateDriverStatusByDriver } from '../model/updateDriverStatusByDriver';
import { UpdateOrderDriverComment } from '../model/updateOrderDriverComment';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DriverService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new Driver
     * 
     * @param body Driver object that needs to be added to driver list
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverCreate(body: CreateDriver, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driverCreate(body: CreateDriver, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driverCreate(body: CreateDriver, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driverCreate(body: CreateDriver, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling driverCreate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Driver>('post',`${this.basePath}/drivers`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Driver
     * 
     * @param personalNumber Driver&#x27;s personal number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverDelete(personalNumber: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public driverDelete(personalNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public driverDelete(personalNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public driverDelete(personalNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling driverDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/drivers/${encodeURIComponent(String(personalNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Driver by personal number
     * 
     * @param personalNumber Driver&#x27;s personal number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverFindById(personalNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driverFindById(personalNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driverFindById(personalNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driverFindById(personalNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling driverFindById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Driver>('get',`${this.basePath}/drivers/${encodeURIComponent(String(personalNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Drivers by name and surname
     * 
     * @param name Driver&#x27;s name
     * @param surname Driver&#x27;s surname
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverFindByNameAndSurname(name: string, surname: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Driver>>;
    public driverFindByNameAndSurname(name: string, surname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Driver>>>;
    public driverFindByNameAndSurname(name: string, surname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Driver>>>;
    public driverFindByNameAndSurname(name: string, surname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling driverFindByNameAndSurname.');
        }

        if (surname === null || surname === undefined) {
            throw new Error('Required parameter surname was null or undefined when calling driverFindByNameAndSurname.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (surname !== undefined && surname !== null) {
            queryParameters = queryParameters.set('surname', <any>surname);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Driver>>('get',`${this.basePath}/drivers/nameAndSurname`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Driver by username
     * 
     * @param username Driver&#x27;s username
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverFindByUsername(username: string, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driverFindByUsername(username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driverFindByUsername(username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driverFindByUsername(username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling driverFindByUsername.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Driver>('get',`${this.basePath}/drivers/byUsername/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update assigned Order for Driver
     * 
     * @param orderId Order id
     * @param personalNumber Driver&#x27;s personal number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverUnassignOrder(orderId: number, personalNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driverUnassignOrder(orderId: number, personalNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driverUnassignOrder(orderId: number, personalNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driverUnassignOrder(orderId: number, personalNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling driverUnassignOrder.');
        }

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling driverUnassignOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Driver>('patch',`${this.basePath}/drivers/unassignOrder/${encodeURIComponent(String(orderId))}/${encodeURIComponent(String(personalNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Driver by Logistician
     * 
     * @param body Driver object that needs to be updated
     * @param personalNumber Driver&#x27;s personal number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverUpdateByLogistician(body: UpdateDriverByLogistician, personalNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driverUpdateByLogistician(body: UpdateDriverByLogistician, personalNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driverUpdateByLogistician(body: UpdateDriverByLogistician, personalNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driverUpdateByLogistician(body: UpdateDriverByLogistician, personalNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling driverUpdateByLogistician.');
        }

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling driverUpdateByLogistician.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Driver>('patch',`${this.basePath}/drivers/byLogistician/${encodeURIComponent(String(personalNumber))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update assigned Order for Driver
     * 
     * @param orderId Order id
     * @param personalNumber Driver&#x27;s personal number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverUpdateCurrentOrder(orderId: number, personalNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driverUpdateCurrentOrder(orderId: number, personalNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driverUpdateCurrentOrder(orderId: number, personalNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driverUpdateCurrentOrder(orderId: number, personalNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling driverUpdateCurrentOrder.');
        }

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling driverUpdateCurrentOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Driver>('patch',`${this.basePath}/drivers/currentOrder/${encodeURIComponent(String(orderId))}/${encodeURIComponent(String(personalNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update driver comment for Order
     * 
     * @param body Order object that needs to be updated
     * @param personalNumber Driver&#x27;s personal number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverUpdateOrderComment(body: UpdateOrderDriverComment, personalNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driverUpdateOrderComment(body: UpdateOrderDriverComment, personalNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driverUpdateOrderComment(body: UpdateOrderDriverComment, personalNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driverUpdateOrderComment(body: UpdateOrderDriverComment, personalNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling driverUpdateOrderComment.');
        }

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling driverUpdateOrderComment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Driver>('patch',`${this.basePath}/drivers/driverComment/${encodeURIComponent(String(personalNumber))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Driver status by Driver
     * 
     * @param body Driver object that needs to be updated
     * @param personalNumber Driver&#x27;s personal number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driverUpdateStatusByDriver(body: UpdateDriverStatusByDriver, personalNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driverUpdateStatusByDriver(body: UpdateDriverStatusByDriver, personalNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driverUpdateStatusByDriver(body: UpdateDriverStatusByDriver, personalNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driverUpdateStatusByDriver(body: UpdateDriverStatusByDriver, personalNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling driverUpdateStatusByDriver.');
        }

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling driverUpdateStatusByDriver.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Driver>('patch',`${this.basePath}/drivers/statusByDriver/${encodeURIComponent(String(personalNumber))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all Drivers
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driversFindAll(observe?: 'body', reportProgress?: boolean): Observable<Array<Driver>>;
    public driversFindAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Driver>>>;
    public driversFindAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Driver>>>;
    public driversFindAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Driver>>('get',`${this.basePath}/drivers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Drivers by busy status
     * 
     * @param busyStatus Busy status can be: YES / NO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driversFindByBusyStatus(busyStatus: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Driver>>;
    public driversFindByBusyStatus(busyStatus: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Driver>>>;
    public driversFindByBusyStatus(busyStatus: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Driver>>>;
    public driversFindByBusyStatus(busyStatus: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (busyStatus === null || busyStatus === undefined) {
            throw new Error('Required parameter busyStatus was null or undefined when calling driversFindByBusyStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Driver>>('get',`${this.basePath}/drivers/busy/${encodeURIComponent(String(busyStatus))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Drivers by current city and state
     * 
     * @param city Current city
     * @param state Current state
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driversFindByCurrentCityAndState(city: string, state: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Driver>>;
    public driversFindByCurrentCityAndState(city: string, state: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Driver>>>;
    public driversFindByCurrentCityAndState(city: string, state: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Driver>>>;
    public driversFindByCurrentCityAndState(city: string, state: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling driversFindByCurrentCityAndState.');
        }

        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling driversFindByCurrentCityAndState.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (city !== undefined && city !== null) {
            queryParameters = queryParameters.set('city', <any>city);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Driver>>('get',`${this.basePath}/drivers/currentCityAndState`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Drivers by currentOrderId
     * 
     * @param currentOrderId Current order id for Driver
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driversFindByCurrentOrderId(currentOrderId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Driver>>;
    public driversFindByCurrentOrderId(currentOrderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Driver>>>;
    public driversFindByCurrentOrderId(currentOrderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Driver>>>;
    public driversFindByCurrentOrderId(currentOrderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (currentOrderId === null || currentOrderId === undefined) {
            throw new Error('Required parameter currentOrderId was null or undefined when calling driversFindByCurrentOrderId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Driver>>('get',`${this.basePath}/drivers/currentOrderId/${encodeURIComponent(String(currentOrderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Drivers by current truck number
     * 
     * @param currentTruckNumber Current truck number for Driver
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driversFindByCurrentTruckNumber(currentTruckNumber: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Driver>>;
    public driversFindByCurrentTruckNumber(currentTruckNumber: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Driver>>>;
    public driversFindByCurrentTruckNumber(currentTruckNumber: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Driver>>>;
    public driversFindByCurrentTruckNumber(currentTruckNumber: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (currentTruckNumber === null || currentTruckNumber === undefined) {
            throw new Error('Required parameter currentTruckNumber was null or undefined when calling driversFindByCurrentTruckNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Driver>>('get',`${this.basePath}/drivers/currentTruckNumber/${encodeURIComponent(String(currentTruckNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find codriver for defined Driver by currentOrderId and Driver personal number
     * 
     * @param currentOrderId Current order id for river
     * @param personalNumber Driver&#x27;s personal number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driversFindCodriver(currentOrderId: number, personalNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driversFindCodriver(currentOrderId: number, personalNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driversFindCodriver(currentOrderId: number, personalNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driversFindCodriver(currentOrderId: number, personalNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (currentOrderId === null || currentOrderId === undefined) {
            throw new Error('Required parameter currentOrderId was null or undefined when calling driversFindCodriver.');
        }

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling driversFindCodriver.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Driver>('get',`${this.basePath}/drivers/currentOrderId/${encodeURIComponent(String(currentOrderId))}/${encodeURIComponent(String(personalNumber))}/codriver`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find proper Drivers for Order
     * 
     * @param orderId Order id
     * @param city Current city
     * @param state Current state
     * @param hours Working hours in current month
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driversFindForOrder(orderId: number, city: string, state: string, hours: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Driver>>;
    public driversFindForOrder(orderId: number, city: string, state: string, hours: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Driver>>>;
    public driversFindForOrder(orderId: number, city: string, state: string, hours: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Driver>>>;
    public driversFindForOrder(orderId: number, city: string, state: string, hours: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling driversFindForOrder.');
        }

        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling driversFindForOrder.');
        }

        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling driversFindForOrder.');
        }

        if (hours === null || hours === undefined) {
            throw new Error('Required parameter hours was null or undefined when calling driversFindForOrder.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (orderId !== undefined && orderId !== null) {
            queryParameters = queryParameters.set('orderId', <any>orderId);
        }
        if (city !== undefined && city !== null) {
            queryParameters = queryParameters.set('city', <any>city);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }
        if (hours !== undefined && hours !== null) {
            queryParameters = queryParameters.set('hours', <any>hours);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Driver>>('get',`${this.basePath}/drivers/forOrder`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Order acceptance by Driver
     * 
     * @param personalNumber Driver&#x27;s personal number
     * @param orderAcceptance Order acceptance can be: YES / NO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public driversUpdateOrderAcceptance(personalNumber: number, orderAcceptance: string, observe?: 'body', reportProgress?: boolean): Observable<Driver>;
    public driversUpdateOrderAcceptance(personalNumber: number, orderAcceptance: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Driver>>;
    public driversUpdateOrderAcceptance(personalNumber: number, orderAcceptance: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Driver>>;
    public driversUpdateOrderAcceptance(personalNumber: number, orderAcceptance: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personalNumber === null || personalNumber === undefined) {
            throw new Error('Required parameter personalNumber was null or undefined when calling driversUpdateOrderAcceptance.');
        }

        if (orderAcceptance === null || orderAcceptance === undefined) {
            throw new Error('Required parameter orderAcceptance was null or undefined when calling driversUpdateOrderAcceptance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Driver>('patch',`${this.basePath}/drivers/orderAcceptance/${encodeURIComponent(String(personalNumber))}/${encodeURIComponent(String(orderAcceptance))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
