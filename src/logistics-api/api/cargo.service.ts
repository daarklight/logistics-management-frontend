/**
 * Logistics API
 * Logistics API provides services to find and manage entities for logistics
 *
 * OpenAPI spec version: 1.0
 * Contact: vladislavprokopenko1@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Cargo } from '../model/cargo';
import { CreateCargo } from '../model/createCargo';
import { UpdateCargoByDriver } from '../model/updateCargoByDriver';
import { UpdateCargoByLogistician } from '../model/updateCargoByLogistician';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CargoService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new Cargo
     * 
     * @param body Cargo object that needs to be added to cargo list
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoCreate(body: CreateCargo, observe?: 'body', reportProgress?: boolean): Observable<Cargo>;
    public cargoCreate(body: CreateCargo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cargo>>;
    public cargoCreate(body: CreateCargo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cargo>>;
    public cargoCreate(body: CreateCargo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling cargoCreate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Cargo>('post',`${this.basePath}/cargos`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Cargo
     * 
     * @param cargoId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoDelete(cargoId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cargoDelete(cargoId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cargoDelete(cargoId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cargoDelete(cargoId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cargoId === null || cargoId === undefined) {
            throw new Error('Required parameter cargoId was null or undefined when calling cargoDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/cargos/${encodeURIComponent(String(cargoId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by name
     * 
     * @param name Cargo name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByCargoName(name: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByCargoName(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByCargoName(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByCargoName(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling cargoFindByCargoName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/name/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos with expected completion date time earlier or equal to defined
     * 
     * @param expectedCompletionDateTime Expected completion date time
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByEarlierThanExpectedCompletionDateTime(expectedCompletionDateTime: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByEarlierThanExpectedCompletionDateTime(expectedCompletionDateTime: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByEarlierThanExpectedCompletionDateTime(expectedCompletionDateTime: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByEarlierThanExpectedCompletionDateTime(expectedCompletionDateTime: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (expectedCompletionDateTime === null || expectedCompletionDateTime === undefined) {
            throw new Error('Required parameter expectedCompletionDateTime was null or undefined when calling cargoFindByEarlierThanExpectedCompletionDateTime.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/earlier/expectedCompletionDateTime/${encodeURIComponent(String(expectedCompletionDateTime))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos with real completion date time earlier or equal to defined
     * 
     * @param realCompletionDateTime Real completion date time
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByEarlierThanRealCompletionDateTime(realCompletionDateTime: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByEarlierThanRealCompletionDateTime(realCompletionDateTime: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByEarlierThanRealCompletionDateTime(realCompletionDateTime: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByEarlierThanRealCompletionDateTime(realCompletionDateTime: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realCompletionDateTime === null || realCompletionDateTime === undefined) {
            throw new Error('Required parameter realCompletionDateTime was null or undefined when calling cargoFindByEarlierThanRealCompletionDateTime.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/earlier/realCompletionDateTime/${encodeURIComponent(String(realCompletionDateTime))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by final city and state
     * 
     * @param city Cargo final city
     * @param state Cargo final state
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByFinalCityAndState(city: string, state: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByFinalCityAndState(city: string, state: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByFinalCityAndState(city: string, state: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByFinalCityAndState(city: string, state: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling cargoFindByFinalCityAndState.');
        }

        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling cargoFindByFinalCityAndState.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (city !== undefined && city !== null) {
            queryParameters = queryParameters.set('city', <any>city);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/finalCityAndState`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by final city, state and address
     * 
     * @param city Cargo final city
     * @param state Cargo final state
     * @param address Cargo final address
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByFinalCityAndStateAndAddress(city: string, state: string, address: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByFinalCityAndStateAndAddress(city: string, state: string, address: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByFinalCityAndStateAndAddress(city: string, state: string, address: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByFinalCityAndStateAndAddress(city: string, state: string, address: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling cargoFindByFinalCityAndStateAndAddress.');
        }

        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling cargoFindByFinalCityAndStateAndAddress.');
        }

        if (address === null || address === undefined) {
            throw new Error('Required parameter address was null or undefined when calling cargoFindByFinalCityAndStateAndAddress.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (city !== undefined && city !== null) {
            queryParameters = queryParameters.set('city', <any>city);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }
        if (address !== undefined && address !== null) {
            queryParameters = queryParameters.set('address', <any>address);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/finalCityAndStateAndAddress`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargo by id
     * 
     * @param cargoId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindById(cargoId: number, observe?: 'body', reportProgress?: boolean): Observable<Cargo>;
    public cargoFindById(cargoId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cargo>>;
    public cargoFindById(cargoId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cargo>>;
    public cargoFindById(cargoId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cargoId === null || cargoId === undefined) {
            throw new Error('Required parameter cargoId was null or undefined when calling cargoFindById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Cargo>('get',`${this.basePath}/cargos/${encodeURIComponent(String(cargoId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos with expected completion date time later or equal to defined
     * 
     * @param expectedCompletionDateTime Expected completion date time
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByLaterThanExpectedCompletionDateTime(expectedCompletionDateTime: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByLaterThanExpectedCompletionDateTime(expectedCompletionDateTime: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByLaterThanExpectedCompletionDateTime(expectedCompletionDateTime: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByLaterThanExpectedCompletionDateTime(expectedCompletionDateTime: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (expectedCompletionDateTime === null || expectedCompletionDateTime === undefined) {
            throw new Error('Required parameter expectedCompletionDateTime was null or undefined when calling cargoFindByLaterThanExpectedCompletionDateTime.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/later/expectedCompletionDateTime/${encodeURIComponent(String(expectedCompletionDateTime))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos with real completion date time later or equal to defined
     * 
     * @param realCompletionDateTime Real completion date time
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByLaterThanRealCompletionDateTime(realCompletionDateTime: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByLaterThanRealCompletionDateTime(realCompletionDateTime: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByLaterThanRealCompletionDateTime(realCompletionDateTime: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByLaterThanRealCompletionDateTime(realCompletionDateTime: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (realCompletionDateTime === null || realCompletionDateTime === undefined) {
            throw new Error('Required parameter realCompletionDateTime was null or undefined when calling cargoFindByLaterThanRealCompletionDateTime.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/later/realCompletionDateTime/${encodeURIComponent(String(realCompletionDateTime))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by status loaded &#x3D; YES
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByLoaded(observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByLoaded(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByLoaded(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByLoaded(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/loaded`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by status loaded &#x3D; NO
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByNonLoaded(observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByNonLoaded(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByNonLoaded(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByNonLoaded(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/nonLoaded`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by status unloaded &#x3D; NO
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByNonUnloaded(observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByNonUnloaded(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByNonUnloaded(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByNonUnloaded(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/nonUnloaded`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by Order id
     * 
     * @param orderForCargoId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByOrderId(orderForCargoId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByOrderId(orderForCargoId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByOrderId(orderForCargoId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByOrderId(orderForCargoId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderForCargoId === null || orderForCargoId === undefined) {
            throw new Error('Required parameter orderForCargoId was null or undefined when calling cargoFindByOrderId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/byOrder/${encodeURIComponent(String(orderForCargoId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by start city and state
     * 
     * @param city Start city
     * @param state Start state
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByStartCityAndState(city: string, state: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByStartCityAndState(city: string, state: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByStartCityAndState(city: string, state: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByStartCityAndState(city: string, state: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling cargoFindByStartCityAndState.');
        }

        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling cargoFindByStartCityAndState.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (city !== undefined && city !== null) {
            queryParameters = queryParameters.set('city', <any>city);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/startCityAndState`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by start city, state and address
     * 
     * @param city Cargo start city
     * @param state Cargo start state
     * @param address Cargo start address
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByStartCityAndStateAndAddress(city: string, state: string, address: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByStartCityAndStateAndAddress(city: string, state: string, address: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByStartCityAndStateAndAddress(city: string, state: string, address: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByStartCityAndStateAndAddress(city: string, state: string, address: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling cargoFindByStartCityAndStateAndAddress.');
        }

        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling cargoFindByStartCityAndStateAndAddress.');
        }

        if (address === null || address === undefined) {
            throw new Error('Required parameter address was null or undefined when calling cargoFindByStartCityAndStateAndAddress.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (city !== undefined && city !== null) {
            queryParameters = queryParameters.set('city', <any>city);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }
        if (address !== undefined && address !== null) {
            queryParameters = queryParameters.set('address', <any>address);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/startCityAndStateAndAddress`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Cargos by status unloaded &#x3D; YES
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoFindByUnloaded(observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargoFindByUnloaded(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargoFindByUnloaded(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargoFindByUnloaded(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos/unloaded`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Cargo
     * 
     * @param body Cargo object that needs to be updated
     * @param cargoId Cargo id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoUpdateByDriver(body: UpdateCargoByDriver, cargoId: number, observe?: 'body', reportProgress?: boolean): Observable<Cargo>;
    public cargoUpdateByDriver(body: UpdateCargoByDriver, cargoId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cargo>>;
    public cargoUpdateByDriver(body: UpdateCargoByDriver, cargoId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cargo>>;
    public cargoUpdateByDriver(body: UpdateCargoByDriver, cargoId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling cargoUpdateByDriver.');
        }

        if (cargoId === null || cargoId === undefined) {
            throw new Error('Required parameter cargoId was null or undefined when calling cargoUpdateByDriver.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Cargo>('patch',`${this.basePath}/cargos/byDriver/${encodeURIComponent(String(cargoId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Cargo
     * 
     * @param body Cargo object that needs to be updated
     * @param cargoId Cargo id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoUpdateByLogistician(body: UpdateCargoByLogistician, cargoId: number, observe?: 'body', reportProgress?: boolean): Observable<Cargo>;
    public cargoUpdateByLogistician(body: UpdateCargoByLogistician, cargoId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cargo>>;
    public cargoUpdateByLogistician(body: UpdateCargoByLogistician, cargoId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cargo>>;
    public cargoUpdateByLogistician(body: UpdateCargoByLogistician, cargoId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling cargoUpdateByLogistician.');
        }

        if (cargoId === null || cargoId === undefined) {
            throw new Error('Required parameter cargoId was null or undefined when calling cargoUpdateByLogistician.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Cargo>('patch',`${this.basePath}/cargos/byLogistician/${encodeURIComponent(String(cargoId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update loaded status to YES
     * 
     * @param cargoId Cargo id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoUpdateLoading(cargoId: number, observe?: 'body', reportProgress?: boolean): Observable<Cargo>;
    public cargoUpdateLoading(cargoId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cargo>>;
    public cargoUpdateLoading(cargoId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cargo>>;
    public cargoUpdateLoading(cargoId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cargoId === null || cargoId === undefined) {
            throw new Error('Required parameter cargoId was null or undefined when calling cargoUpdateLoading.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Cargo>('get',`${this.basePath}/cargos/loadingDone/${encodeURIComponent(String(cargoId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update unloaded status to YES
     * 
     * @param cargoId Cargo id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargoUpdateUnloading(cargoId: number, observe?: 'body', reportProgress?: boolean): Observable<Cargo>;
    public cargoUpdateUnloading(cargoId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cargo>>;
    public cargoUpdateUnloading(cargoId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cargo>>;
    public cargoUpdateUnloading(cargoId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cargoId === null || cargoId === undefined) {
            throw new Error('Required parameter cargoId was null or undefined when calling cargoUpdateUnloading.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Cargo>('get',`${this.basePath}/cargos/unloadingDone/${encodeURIComponent(String(cargoId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all Cargos
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargosFindAll(observe?: 'body', reportProgress?: boolean): Observable<Array<Cargo>>;
    public cargosFindAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cargo>>>;
    public cargosFindAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cargo>>>;
    public cargosFindAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cargo>>('get',`${this.basePath}/cargos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
